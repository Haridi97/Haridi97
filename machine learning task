{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/eslamharidi/notebook323c766b9f?scriptVersionId=103013825\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown","outputs":[],"execution_count":0},{"cell_type":"code","execution_count":1,"id":"bb39fea5","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2022-08-10T23:35:38.718574Z","iopub.status.busy":"2022-08-10T23:35:38.718098Z","iopub.status.idle":"2022-08-10T23:35:40.300219Z","shell.execute_reply":"2022-08-10T23:35:40.299256Z"},"papermill":{"duration":1.591526,"end_time":"2022-08-10T23:35:40.302893","exception":false,"start_time":"2022-08-10T23:35:38.711367","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/titanic/train.csv\n","/kaggle/input/titanic/test.csv\n","/kaggle/input/titanic/gender_submission.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import rcParams\n","import os\n","from sklearn import tree\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import GridSearchCV, cross_val_score\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))"]},{"cell_type":"code","execution_count":2,"id":"b65ce363","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:40.3117Z","iopub.status.busy":"2022-08-10T23:35:40.310819Z","iopub.status.idle":"2022-08-10T23:35:40.37091Z","shell.execute_reply":"2022-08-10T23:35:40.369488Z"},"papermill":{"duration":0.067404,"end_time":"2022-08-10T23:35:40.373732","exception":false,"start_time":"2022-08-10T23:35:40.306328","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["PassengerId    0\n","Survived       0\n","Pclass         0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Ticket         0\n","Fare           0\n","Embarked       0\n","dtype: int64\n","PassengerId    0\n","Pclass         0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Ticket         0\n","Fare           0\n","Embarked       0\n","dtype: int64\n","shape of X_train (891, 7)\n","Shape of Y_train (891,)\n","Shape of x_test (418, 7)\n"]}],"source":["train_data_ex = pd.read_csv('../input/titanic/train.csv')\n","test_data_ex = pd.read_csv('../input/titanic/test.csv')\n","#print(test_data_ex.isnull().sum())\n","#Dropping the column 'Cabin' as it has too many null values.\n","# deep copy to copy data and indeces\n","train_ex = train_data_ex.copy(deep=True)\n","test_ex = test_data_ex.copy(deep=True)\n","\n","#Dealing with missing values\n","# dropping Cabin\n","train_ex = train_ex.drop(['Name','Cabin'], axis=1)\n","test_ex = test_ex.drop(['Name','Cabin'], axis=1)\n","\n","# filling the nan values for Age and fare column with the mean \n","combined_data = [train_ex, test_ex]\n","for data in combined_data:\n","    data.Age.fillna(data.Age.mean(), inplace = True)\n","    data.Fare.fillna(data.Fare.mean(), inplace = True)\n","    \n","#filling the nan values of Embarked column with most_frequent value\n","train_ex['Embarked'] = train_ex['Embarked'].fillna('S')\n","    \n","print(train_ex.isnull().sum())\n","print(test_ex.isnull().sum())\n","\n","#Categorical variables:[Sex', 'Ticket', 'Embarked']\n","#Let's start by converting Sex feature to categorical female=1 and male=0\n","train_ex.Sex = train_ex.Sex.map({'female':1, 'male':0})\n","test_ex.Sex = test_ex.Sex.map({'female':1, 'male':0})\n","\n","#using map funcion to change the Embarked column S = 1, C = 2, Q = 0\n","change = {'S':1,'C':2,'Q':0}\n","train_ex.Embarked = train_ex.Embarked.map(change)\n","test_ex.Embarked = test_ex.Embarked.map(change)\n","\n","#Dropping PassengerId and Ticket column\n","columns_to_drop = ['PassengerId','Ticket']\n","train_ex.drop(columns_to_drop, axis = 1, inplace = True)\n","test_ex.drop(columns_to_drop[1], axis = 1, inplace = True)\n","\n","X_train_ex = train_ex.drop(\"Survived\", axis=1)\n","Y_train_ex = train_ex[\"Survived\"]\n","X_test_ex = test_ex.drop(\"PassengerId\", axis = 1)\n","print(\"shape of X_train\",X_train_ex.shape)\n","print(\"Shape of Y_train\",Y_train_ex.shape)\n","print(\"Shape of x_test\",X_test_ex.shape)"]},{"cell_type":"code","execution_count":3,"id":"d96f83a8","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:40.381811Z","iopub.status.busy":"2022-08-10T23:35:40.381387Z","iopub.status.idle":"2022-08-10T23:35:53.269034Z","shell.execute_reply":"2022-08-10T23:35:53.267523Z"},"papermill":{"duration":12.8948,"end_time":"2022-08-10T23:35:53.27183","exception":false,"start_time":"2022-08-10T23:35:40.37703","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2022-08-10 23:35:46.893891: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n","2022-08-10 23:35:47.147491: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/50\n","28/28 - 1s - loss: 0.6457 - acc: 0.6341\n","Epoch 2/50\n","28/28 - 0s - loss: 0.5974 - acc: 0.6700\n","Epoch 3/50\n","28/28 - 0s - loss: 0.5772 - acc: 0.6835\n","Epoch 4/50\n","28/28 - 0s - loss: 0.5633 - acc: 0.6869\n","Epoch 5/50\n","28/28 - 0s - loss: 0.5554 - acc: 0.7205\n","Epoch 6/50\n","28/28 - 0s - loss: 0.5462 - acc: 0.7329\n","Epoch 7/50\n","28/28 - 0s - loss: 0.5279 - acc: 0.7565\n","Epoch 8/50\n","28/28 - 0s - loss: 0.5205 - acc: 0.7609\n","Epoch 9/50\n","28/28 - 0s - loss: 0.5148 - acc: 0.7677\n","Epoch 10/50\n","28/28 - 0s - loss: 0.5202 - acc: 0.7598\n","Epoch 11/50\n","28/28 - 0s - loss: 0.5051 - acc: 0.7632\n","Epoch 12/50\n","28/28 - 0s - loss: 0.4986 - acc: 0.7654\n","Epoch 13/50\n","28/28 - 0s - loss: 0.4935 - acc: 0.7823\n","Epoch 14/50\n","28/28 - 0s - loss: 0.4903 - acc: 0.7800\n","Epoch 15/50\n","28/28 - 0s - loss: 0.4733 - acc: 0.7778\n","Epoch 16/50\n","28/28 - 0s - loss: 0.4798 - acc: 0.7823\n","Epoch 17/50\n","28/28 - 0s - loss: 0.4794 - acc: 0.7834\n","Epoch 18/50\n","28/28 - 0s - loss: 0.4757 - acc: 0.7868\n","Epoch 19/50\n","28/28 - 0s - loss: 0.4841 - acc: 0.7755\n","Epoch 20/50\n","28/28 - 0s - loss: 0.4668 - acc: 0.7957\n","Epoch 21/50\n","28/28 - 0s - loss: 0.4578 - acc: 0.7946\n","Epoch 22/50\n","28/28 - 0s - loss: 0.4522 - acc: 0.7924\n","Epoch 23/50\n","28/28 - 0s - loss: 0.4777 - acc: 0.8047\n","Epoch 24/50\n","28/28 - 0s - loss: 0.4565 - acc: 0.7980\n","Epoch 25/50\n","28/28 - 0s - loss: 0.4552 - acc: 0.7946\n","Epoch 26/50\n","28/28 - 0s - loss: 0.4577 - acc: 0.8002\n","Epoch 27/50\n","28/28 - 0s - loss: 0.4597 - acc: 0.7991\n","Epoch 28/50\n","28/28 - 0s - loss: 0.4615 - acc: 0.8070\n","Epoch 29/50\n","28/28 - 0s - loss: 0.4515 - acc: 0.8092\n","Epoch 30/50\n","28/28 - 0s - loss: 0.4424 - acc: 0.8103\n","Epoch 31/50\n","28/28 - 0s - loss: 0.4399 - acc: 0.8182\n","Epoch 32/50\n","28/28 - 0s - loss: 0.4515 - acc: 0.7991\n","Epoch 33/50\n","28/28 - 0s - loss: 0.4521 - acc: 0.7969\n","Epoch 34/50\n","28/28 - 0s - loss: 0.4531 - acc: 0.8013\n","Epoch 35/50\n","28/28 - 0s - loss: 0.4450 - acc: 0.8025\n","Epoch 36/50\n","28/28 - 0s - loss: 0.4475 - acc: 0.8103\n","Epoch 37/50\n","28/28 - 0s - loss: 0.4397 - acc: 0.8126\n","Epoch 38/50\n","28/28 - 0s - loss: 0.4455 - acc: 0.8092\n","Epoch 39/50\n","28/28 - 0s - loss: 0.4515 - acc: 0.7980\n","Epoch 40/50\n","28/28 - 0s - loss: 0.4467 - acc: 0.8025\n","Epoch 41/50\n","28/28 - 0s - loss: 0.4265 - acc: 0.8193\n","Epoch 42/50\n","28/28 - 0s - loss: 0.4175 - acc: 0.8103\n","Epoch 43/50\n","28/28 - 0s - loss: 0.4314 - acc: 0.8171\n","Epoch 44/50\n","28/28 - 0s - loss: 0.4256 - acc: 0.8272\n","Epoch 45/50\n","28/28 - 0s - loss: 0.4100 - acc: 0.8204\n","Epoch 46/50\n","28/28 - 0s - loss: 0.4367 - acc: 0.8171\n","Epoch 47/50\n","28/28 - 0s - loss: 0.4195 - acc: 0.8126\n","Epoch 48/50\n","28/28 - 0s - loss: 0.4322 - acc: 0.8081\n","Epoch 49/50\n","28/28 - 0s - loss: 0.4162 - acc: 0.8148\n","Epoch 50/50\n","28/28 - 0s - loss: 0.4192 - acc: 0.8159\n","[0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n"," 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0\n"," 0 0 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0\n"," 1 1 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n"," 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0\n"," 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1\n"," 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0\n"," 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 1 1 1 0 1 0 0 0 0 0]\n","Accuracy :  72.39\n"]}],"source":["import tensorflow as tf\n","import keras \n","from keras.layers import Dense, Dropout, Input\n","from keras.models import Sequential\n","from tensorflow import keras\n","from tensorflow.keras import layers, callbacks\n","\n","#Defining model\n","model = Sequential()\n","model.add(Dense(units = 32, input_shape = (7,), activation = 'relu'))\n","model.add(Dense(units = 64, activation = 'relu', kernel_initializer = 'he_normal', use_bias = False))\n","model.add(tf.keras.layers.BatchNormalization())\n","model.add(Dense(units = 128, activation = 'relu',kernel_initializer = 'he_normal', use_bias = False))\n","model.add(Dropout(0.1))\n","model.add(Dense(units = 64, activation = 'relu',kernel_initializer = 'he_normal', use_bias = False))\n","model.add(Dropout(0.1))\n","model.add(Dense(units = 32, activation = 'relu'))\n","model.add(Dropout(0.15))\n","model.add(Dense(units = 16, activation = 'relu'))\n","model.add(Dense(units = 8, activation = 'relu',kernel_initializer = 'he_normal', use_bias = False))\n","model.add(Dense(units =1 , activation = 'sigmoid'))\n","\n","model.compile(loss = tf.keras.losses.binary_crossentropy, optimizer = tf.keras.optimizers.Adam(),metrics = ['acc'])\n","model.fit(X_train_ex, Y_train_ex, batch_size = 32, verbose = 2, epochs = 50)\n","predict_ex = model.predict(X_test_ex)\n","#since we have use sigmoid activation function in output layer\n","predict_ex = (predict_ex > 0.5).astype(int).ravel()\n","print(predict_ex)\n","from sklearn import metrics\n","Y_pred_rand_ex= (model.predict(X_train_ex) > 0.5).astype(int)\n","print('Accuracy : ', np.round(metrics.accuracy_score(Y_train_ex, Y_pred_rand_ex)*100,2))"]},{"cell_type":"code","execution_count":4,"id":"e623b472","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:53.292927Z","iopub.status.busy":"2022-08-10T23:35:53.292508Z","iopub.status.idle":"2022-08-10T23:35:53.320518Z","shell.execute_reply":"2022-08-10T23:35:53.319188Z"},"papermill":{"duration":0.042073,"end_time":"2022-08-10T23:35:53.323722","exception":false,"start_time":"2022-08-10T23:35:53.281649","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["(757, 7)\n","(757,)\n","Accuracy score for validation data is: 0.7910447761194029\n"]},{"data":{"text/plain":["<function sklearn.metrics._classification.accuracy_score(y_true, y_pred, *, normalize=True, sample_weight=None)>"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["#Decision Tree model\n","from sklearn import tree\n","X_train_ex = train_ex.drop(\"Survived\", axis=1)\n","Y_train_ex = train_ex[\"Survived\"]\n","X_test_ex = test_ex.drop(\"PassengerId\", axis = 1)\n","train_X, val_X, train_y, val_y = train_test_split(X_train_ex, Y_train_ex,test_size=0.15, random_state = 0)\n","print(train_X.shape)\n","print(train_y.shape)\n","decision_tree = tree.DecisionTreeClassifier(random_state = 0)\n","decision_tree.fit(train_X, train_y)\n","Y_pred = decision_tree.predict(val_X)\n","Y_pred_test = decision_tree.predict(X_test_ex)\n","print('Accuracy score for validation data is:', accuracy_score(val_y,Y_pred))\n","accuracy_score\n"]},{"cell_type":"code","execution_count":5,"id":"7c7674df","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:53.344902Z","iopub.status.busy":"2022-08-10T23:35:53.344476Z","iopub.status.idle":"2022-08-10T23:35:53.405681Z","shell.execute_reply":"2022-08-10T23:35:53.404153Z"},"papermill":{"duration":0.075106,"end_time":"2022-08-10T23:35:53.408322","exception":false,"start_time":"2022-08-10T23:35:53.333216","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy score for validation data is: 0.8355263157894737\n"]}],"source":["#Random Forest model\n","from sklearn.tree import DecisionTreeRegressor\n","X_train_ex = train_ex.drop(\"Survived\", axis=1)\n","Y_train_ex = train_ex[\"Survived\"]\n","X_test_ex = test_ex.drop(\"PassengerId\", axis = 1)\n","X_train_r, X_val_r, y_train_r, y_val_r = train_test_split(X_train_ex, Y_train_ex, test_size=0.17, random_state = 0)\n","rdmf = RandomForestClassifier(n_estimators=20, criterion='entropy')\n","rdmf.fit(X_train_r, y_train_r)\n","Y_pred = rdmf.predict(X_val_r)\n","print('Accuracy score for validation data is:', accuracy_score(y_val_r,Y_pred))"]},{"cell_type":"code","execution_count":6,"id":"7a9fa6f9","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:53.429394Z","iopub.status.busy":"2022-08-10T23:35:53.428704Z","iopub.status.idle":"2022-08-10T23:35:53.446102Z","shell.execute_reply":"2022-08-10T23:35:53.444986Z"},"papermill":{"duration":0.031609,"end_time":"2022-08-10T23:35:53.449405","exception":false,"start_time":"2022-08-10T23:35:53.417796","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy score for validation data is: 0.7828947368421053\n"]}],"source":["#K- Nearest Neighbours KNN\n","from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier(p=2, n_neighbors=17)\n","knn.fit(X_train_r, y_train_r)\n","Y_pred = knn.predict(X_val_r)\n","print('Accuracy score for validation data is:', accuracy_score(y_val_r,Y_pred))\n"]},{"cell_type":"code","execution_count":7,"id":"0b99aae6","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:53.471377Z","iopub.status.busy":"2022-08-10T23:35:53.470626Z","iopub.status.idle":"2022-08-10T23:35:54.080194Z","shell.execute_reply":"2022-08-10T23:35:54.078641Z"},"papermill":{"duration":0.623135,"end_time":"2022-08-10T23:35:54.082638","exception":false,"start_time":"2022-08-10T23:35:53.459503","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy score for validation data is: 0.8486842105263158\n"]}],"source":["from xgboost import XGBClassifier\n","xgb = XGBClassifier()\n","xgb.fit(X_train_r, y_train_r)\n","Y_pred = xgb.predict(X_val_r)\n","print('Accuracy score for validation data is:', accuracy_score(y_val_r,Y_pred))\n","\n"]},{"cell_type":"code","execution_count":8,"id":"af55debf","metadata":{"execution":{"iopub.execute_input":"2022-08-10T23:35:54.103884Z","iopub.status.busy":"2022-08-10T23:35:54.102772Z","iopub.status.idle":"2022-08-10T23:36:05.527733Z","shell.execute_reply":"2022-08-10T23:36:05.52631Z"},"papermill":{"duration":11.438267,"end_time":"2022-08-10T23:36:05.530247","exception":false,"start_time":"2022-08-10T23:35:54.09198","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy score for validation data is: 0.7828947368421053\n"]}],"source":["# Support Vector Machines\n","from sklearn import svm\n","SVC=svm.SVC(kernel='linear', C=1).fit(X_train_r, y_train_r)\n","Y_pred = SVC.predict(X_val_r)\n","print('Accuracy score for validation data is:', accuracy_score(y_val_r,Y_pred))\n","\n","\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"papermill":{"default_parameters":{},"duration":39.177554,"end_time":"2022-08-10T23:36:08.797153","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2022-08-10T23:35:29.619599","version":"2.3.4"}},"nbformat":4,"nbformat_minor":5}